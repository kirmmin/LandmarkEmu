// <auto-generated />
using System;
using LandmarkEmulator.Database.Character;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LandmarkEmulator.Database.Character.Migrations
{
    [DbContext(typeof(CharacterContext))]
    partial class CharacterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("LandmarkEmulator.Database.Character.Model.CharacterCustomisationModel", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<uint>("Slot")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("slot");

                    b.Property<uint>("Option")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("option");

                    b.Property<uint>("Tint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("tint");

                    b.HasKey("Id", "Slot")
                        .HasName("PRIMARY");

                    b.ToTable("character_customisation", (string)null);
                });

            modelBuilder.Entity("LandmarkEmulator.Database.Character.Model.CharacterModel", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<ulong>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("accountId");

                    b.Property<uint>("BodyType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("bodyType");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleteTime");

                    b.Property<byte>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("gender");

                    b.Property<DateTime?>("LastOnline")
                        .HasColumnType("datetime")
                        .HasColumnName("lastOnline");

                    b.Property<ulong>("LastServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("lastServerId");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("")
                        .HasColumnName("name");

                    b.Property<string>("OriginalName")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("originalName");

                    b.Property<byte>("Race")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("race");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("accountId");

                    b.ToTable("character", (string)null);
                });

            modelBuilder.Entity("LandmarkEmulator.Database.Character.Model.CharacterCustomisationModel", b =>
                {
                    b.HasOne("LandmarkEmulator.Database.Character.Model.CharacterModel", "Character")
                        .WithMany("Customisation")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__character_customisation_id__character_id");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("LandmarkEmulator.Database.Character.Model.CharacterModel", b =>
                {
                    b.Navigation("Customisation");
                });
#pragma warning restore 612, 618
        }
    }
}
